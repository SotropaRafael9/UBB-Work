     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 <res 00000194>              array resd 101 ;404 bytes
    17 00000194 <res 00000004>              count resd 1
    18 00000198 256400                      d_format db "%d", 0
    19 0000019B 25780A00                    x_format db "%x", 10, 0
    20 0000019F <res 000000CA>              result resw 101 ;202 bytes  
    21 00000269 <res 00000065>              num_bits resb 101
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 BE[00000000]                    mov esi, array
    27 00000005 C705[94010000]3000-             mov [count], dword '0'
    27 0000000D 0000               
    28                                          .read_loop:
    29                                              ;read numbers from keyboard
    30 0000000F 56                                  push esi
    31 00000010 68[98010000]                        push d_format
    32 00000015 FF15[00000000]                      call [scanf]
    33 0000001B 83C408                              add esp, 2*4
    34                                              ;read until we find 0
    35 0000001E 833E00                              cmp [esi], dword 0
    36 00000021 7414                                je .done_read
    37                                              
    38 00000023 83C604                              add esi, 4
    39 00000026 FF05[94010000]                      inc dword[count]
    40                                              ;read until we have more than 100 numbers
    41 0000002C 833D[94010000]64                    cmp dword[count], 100
    42 00000033 7402                                je .done_read
    43                                              
    44 00000035 EBD8                            jmp .read_loop
    45                                          .done_read:
    46                                          
    47 00000037 8B0D[94010000]                  mov ecx, [count]
    48 0000003D BE[00000000]                    mov esi, array
    49 00000042 BF[9F010000]                    mov edi, result
    50                                          
    51                                          .loop_1:
    52                                              ;calculate the currect word
    53 00000047 8A6602                              mov ah, [esi+2]
    54 0000004A 8A06                                mov al, [esi]
    55 0000004C 8907                                mov [edi], eax
    56                                              
    57 0000004E 83C604                              add esi, 4
    58 00000051 83C702                              add edi, 2
    59                                              
    60                                  
    61 00000054 89FB                                mov ebx, edi
    62 00000056 81EB[9F010000]                      sub ebx, result
    63 0000005C D1E3                                shl ebx, 1
    64 0000005E 81C3[69020000]                      add ebx, num_bits
    65 00000064 C60300                              mov [ebx], byte 0
    66 00000067 51                                  push ecx
    67 00000068 B910000000                          mov ecx, 16
    68                                              .count_bits:
    69 0000006D 66D1E8                                  shr ax, 1
    70 00000070 801300                                  adc byte [ebx], 0
    71 00000073 E2F8                                loop .count_bits
    72 00000075 59                                  pop ecx
    73                                              
    74 00000076 E2CF                            loop .loop_1
    75                                          
    76 00000078 BE00000000                      mov esi, 0 ; i=0
    77 0000007D BF00000000                      mov edi, 0
    78 00000082 8B0D[94010000]                  mov ecx, [count]
    79 00000088 49                              dec ecx
    80 00000089 83F900                          cmp ecx, 0
    81 0000008C 7448                            je .print
    82                                          .sort:
    83 0000008E 89F7                                mov edi, esi
    84 00000090 47                                  inc edi ; j = i + 1
    85 00000091 51                                  push ecx
    86                                              .sort_2:
    87 00000092 8A86[69020000]                          mov al, [esi + num_bits] ; al = num_bits[i]
    88 00000098 8AA7[69020000]                          mov ah, [edi + num_bits] ; ah = num_bits[j]
    89 0000009E 38E0                                    cmp al, ah
    90 000000A0 732C                                    jae .skip ;we swich them
    91 000000A2 88A6[69020000]                              mov [esi + num_bits], ah
    92 000000A8 8887[69020000]                              mov [edi + num_bits], al
    93                                                      
    94 000000AE 668B8436[9F010000]                          mov ax, [2 * esi + result]
    95 000000B6 668B9C3F[9F010000]                          mov bx, [2 * edi + result]
    96                                                      
    97 000000BE 66899C36[9F010000]                          mov [2 * esi + result], bx
    98 000000C6 6689843F[9F010000]                          mov [2 * edi + result], ax
    99                                                      
   100                                                  .skip:
   101 000000CE 46                                      inc esi
   102 000000CF E2C1                                loop .sort_2
   103 000000D1 46                                  inc esi
   104 000000D2 59                                  pop ecx
   105 000000D3 46                                  inc esi
   106 000000D4 E2B8                            loop .sort
   107                                          .print
   107          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
   108 000000D6 8B0D[94010000]                  mov ecx, [count]
   109 000000DC BE[9F010000]                    mov esi, result
   110                                          .loop_print:
   111 000000E1 51                                  push ecx 
   112 000000E2 B800000000                          mov eax, 0
   113 000000E7 66AD                                lodsw
   114 000000E9 50                                  push eax
   115                                              
   116                                                      
   117                                                     
   118                                              
   119                                          
   120                                          ; exit(0)
   121 000000EA 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   122 000000EC FF15[00000000]                  call    [exit]       ; call exit to terminate the program
