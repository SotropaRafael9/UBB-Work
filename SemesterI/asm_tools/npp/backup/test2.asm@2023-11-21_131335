bits 32 ; assembling for the 32 bits architecture

; declare the EntryPoint (a label defining the very first instruction of the program)
global start        

; declare external functions needed by our program
extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
                          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions

; our data is declared here (the variables needed by our program)
segment data use32 class=data
    ; ...
    a dd 0
    b dd 0
    format db "%d %d", 0
    message1 db "Introduceti cele 2 numere: ",0
    result1 db "Result is: <%d> = <%d> ",0
    result2 db "Result is: <%d> > <%d> ",0
    result3 db "Result is: <%d> < <%d> ",0

; our code starts here
segment code use32 class=code
    start:
        ; ...
        push dword message1
        call [printf]
        add esp, 1 * 4
        
        push dword a
        push dword b
        push dword format
        call [scanf]
        add esp, 3 * 4
        
        
        
        mov eax, 0
        mov ebx, 0
        mov al, [a]
        mov bl, [b]

        
        cmp al,bl
        je a_eq_with_b ; if eax is eq with ebx 
        jl a_grater_b ; if is greater
        jg a_lower_b
        a_eq_with_b:
            push dword eax
            push dword ebx
            push dword result1
            call [printf]
            add esp, 3 * 4
            jmp end1
        a_grater_b:
            push dword eax
            push dword ebx
            push dword result2
            call [printf]
            add esp, 3 * 4
            jmp end1
        a_lower_b:
            
            push dword eax
            push dword ebx
            push dword result3
            call [printf]
            add esp, 3 * 4
            jmp end1
        
            
            
            
        end1:

        ; push dword eax
        ; push dword ebx
        ; push dword result3
        ; call [printf]
        ; add esp, 3 * 4
        
        ; exit(0)
        push    dword 0      ; push the parameter for exit onto the stack
        call    [exit]       ; call exit to terminate the program
