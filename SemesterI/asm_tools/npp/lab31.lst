     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01                          a db 1h
    15 00000001 0200                        b dw 2h
    16 00000003 05000000                    c dd 5h 
    17 00000007 0300000000000000            d dq 3h
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22                                          ;(c+c-a)-(d+d)-b = (5+5-1)-(3+3)-2 =  ;unsigned
    23                                  
    24 00000000 A1[03000000]                    mov eax, [c]
    25 00000005 8B1D[03000000]                  mov ebx, [c]
    26 0000000B 01D8                            add eax, ebx
    27                                          
    28 0000000D B900000000                      mov ecx, 0
    29 00000012 8A0D[00000000]                  mov cl, [a]
    30                                          
    31 00000018 29C8                            sub eax, ecx
    32                                          
    33 0000001A 50                              push eax
    34                                          
    35 0000001B A1[07000000]                    mov eax, [d]
    36 00000020 8B1D[0B000000]                  mov ebx, [d+4]
    37 00000026 8B0D[07000000]                  mov ecx, [d]
    38 0000002C 8B15[0B000000]                  mov edx, [d+4]
    39                                          
    40 00000032 01C8                            add eax, ecx
    41 00000034 11D3                            adc ebx, edx
    42                                          
    43                                          
    44                                          
    45 00000036 89C1                            mov ecx, eax
    46 00000038 89D3                            mov ebx, edx
    47                                          
    48 0000003A 58                              pop eax ;c+c-a
    49                                          
    50 0000003B BA00000000                      mov edx, 0
    51                                          
    52 00000040 29C8                            sub eax, ecx
    53 00000042 19D3                            sbb ebx, edx
    54                                          
    55 00000044 B900000000                      mov ecx, 0
    56 00000049 668B0D[01000000]                mov cx, [b]
    57 00000050 BA00000000                      mov edx, 0
    58                                          
    59 00000055 29C8                            sub eax, ecx
    60 00000057 19D3                            sbb ebx, edx
    61                                          
    62                                          
    63                                          
    64                                          
    65                                          
    66                                          
    67                                          
    68                                          ; exit(0)
    69 00000059 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    70 0000005B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
