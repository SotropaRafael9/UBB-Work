     1                                  bits 32 
     2                                  global start        
     3                                  
     4                                  
     5                                  extern exit               
     6                                  import exit msvcrt.dll    
     7                                  
     8                                  segment data use32 class=data
     9                                      ; ...
    10 00000000 313233                      a db "123"
    11                                      l1 equ $-a ;length of a
    12 00000003 393837                      b db "987"
    13                                      l2 equ $-b ;length of b 
    14 00000006 00<rept>                    r times l1 + l2 db 0 ;reserves enough bytes for the destination string
    15                                  
    16                                  ; Two character strings A and B are given. Obtain the string R by concatenating the elements of B in reverse order and the elements found on even positions in A.
    17                                  
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 B902000000                      mov ecx, (l2 + 1) // 2 
    21 00000005 BE00000000                      mov esi, 0
    22                                          PushAToStack: ;pune A in stiva si pune ceva in plus daca nr de elemente e impar
    23 0000000A 8A86[00000000]                      mov al, [a + esi]
    24 00000010 46                                  inc esi
    25 00000011 8AA6[00000000]                      mov ah, [a + esi]
    26 00000017 46                                  inc esi
    27 00000018 6650                                push ax
    28 0000001A E2EE                            loop PushAToStack
    29                                          
    30                                          
    31 0000001C B903000000                      mov ecx, l2
    32 00000021 F7C101000000                    test ecx, 1
    33 00000027 BE00000000                      mov esi, 0
    34 0000002C 7A0A                            jpe LengthOfBIsEven ;trecem direct la loop daca nr de elemente e par
    35                                              ;partea asta se executa daca nr de caractere e impar si trece peste primul caracter (ala a fost pus in plus) din stiva
    36 0000002E 6658                                pop ax
    37 00000030 8886[06000000]                      mov [r + esi], al 
    38 00000036 46                                  inc esi
    39 00000037 49                                  dec ecx
    40                                              
    41                                          LengthOfBIsEven:
    42                                              PopReversedAToR: ;scoate din stiva elementele lui A in ordine inversa si le pune in R
    43 00000038 6658                                    pop ax
    44 0000003A 88A6[06000000]                          mov [r + esi], ah
    45 00000040 46                                      inc esi
    46 00000041 8886[06000000]                          mov [r + esi], al
    47 00000047 46                                      inc esi
    48 00000048 49                                      dec ecx
    49 00000049 E2ED                                loop PopReversedAToR
    50                                          
    51                                          
    52                                         
    53                                          
    54                                          
    55                                          ; exit(0)
    56 0000004B 6A00                            push    dword 0      
    57 0000004D FF15[00000000]                  call    [exit]       
