     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fprintf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import fprintf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15                                      ; ...
    16 00000000 746578742E74787400          file db 'text.txt',0
    17 00000009 61312324686A686A39-         text db 'a1#$hjhj989012noipudjksanldi8q2#@!#@!!8nmn1luh21n!@#$m#%KADAWDE@!$@!DSR#@AS',13,10, 0
    17 00000012 38393031326E6F6970-
    17 0000001B 75646A6B73616E6C64-
    17 00000024 693871322340212340-
    17 0000002D 2121386E6D6E316C75-
    17 00000036 6832316E214023246D-
    17 0000003F 23254B414441574445-
    17 00000048 402124402144535223-
    17 00000051 4041530D0A00       
    18 00000057 7700                        modacces db 'w',0
    19 00000059 00000000                    descriptor dd 0
    20 0000005D 257300                      format db '%s', 0
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 68[57000000]                    push dword modacces  ; put modacces to stack
    26 00000005 68[00000000]                    push dword file  ; put file to stack
    27 0000000A FF15[00000000]                  call [fopen] ; opens a file
    28 00000010 83C408                          add esp, 2 * 4
    29 00000013 83F800                          cmp eax, 0  
    30                                          
    31 00000016 7460                            je final
    32 00000018 A3[59000000]                    mov [descriptor], eax ;
    33 0000001D BB00000000                      mov ebx, 0
    34                                          
    35                                          Parcurge:
    36 00000022 80BB[09000000]00                    cmp [text+ebx], byte 0 ; verfy if the current caracter is null caracter and comp the current caracter if it is in  0-33 ascii code
    37 00000029 7434                                je Scrie
    38 0000002B 80BB[09000000]21                    cmp [text+ebx], byte 33
    39 00000032 7302                                jae verfy1
    40                                              
    41 00000034 EB26                                jmp Continue
    42                                              
    43                                          verfy1:
    44 00000036 80BB[09000000]2F                    cmp [text+ebx], byte 47
    45 0000003D 7616                                jbe special_caracter
    46                                              ; very in ascii code 33-47 if is special caracters
    47 0000003F 80BB[09000000]3A                    cmp [text+ebx], byte 58
    48 00000046 7302                                jae verfy2
    49 00000048 EB12                                jmp Continue
    50                                              
    51                                              
    52                                          verfy2:
    53 0000004A 80BB[09000000]40                    cmp [text+ebx], byte 64
    54 00000051 7602                                jbe special_caracter
    55                                              ; 58-64
    56 00000053 EB07                                jmp Continue
    57                                              
    58                                          special_caracter:
    59 00000055 C683[09000000]58                    mov [text+ebx], byte 'X' ; if is special caracter it replays it with 'X'
    60                                          Continue:
    61 0000005C 43                                  inc ebx
    62 0000005D EBC3                                jmp Parcurge
    63                                          
    64                                          Scrie:
    65 0000005F 68[09000000]                    push dword text
    66 00000064 68[5D000000]                    push dword format
    67 00000069 FF35[59000000]                  push dword [descriptor]
    68 0000006F FF15[00000000]                  call [fprintf]
    69 00000075 83C40C                          add esp, 3 * 4
    70                                          
    71                                          final:
    72                                          
    73                                          
    74                                          
    75                                          
    76                                          ; exit(0)
    77 00000078 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    78 0000007A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
