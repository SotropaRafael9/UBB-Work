     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                  
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18                                      
    19 00000000 00000000                    a dd 0
    20 00000004 00000000                    b dd 0
    21 00000008 696E74726F64756365-         mesaj_citere_numar1 db 'introduceti primu numar',13, 10, 0
    21 00000011 7469207072696D7520-
    21 0000001A 6E756D61720D0A00   
    22 00000022 696E74726F64756365-         mesaj_citere_numar2 db 'introduceti al doilea numar',13, 10, 0,
    22 0000002B 746920616C20646F69-
    22 00000034 6C6561206E756D6172-
    22 0000003D 0D0A00             
    23 00000040 256400                      format db "%d", 0
    24 00000043 00000000                    sum dd 0
    25 00000047 72657A756C74617475-         mesaj_afisare db 'rezultatul este: %x',13,10, 0
    25 00000050 6C20657374653A2025-
    25 00000059 780D0A00           
    26                                      
    27                                      ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31 00000000 68[08000000]                    push dword mesaj_citere_numar1  ;print the message
    32 00000005 FF15[00000000]                  call [printf]   ;call printf function
    33 0000000B 83C404                          add esp, 1 * 4 ;clear the stack
    34                                          
    35 0000000E 68[00000000]                    push dword a    ;put on stack a
    36 00000013 68[40000000]                    push dword format ;put on stack format
    37 00000018 FF15[00000000]                  call [scanf]  ; call scanf function
    38 0000001E 83C408                          add esp, 2 * 4
    39                                          
    40 00000021 68[22000000]                    push dword mesaj_citere_numar2
    41 00000026 FF15[00000000]                  call [printf]
    42 0000002C 83C404                          add esp, 1 * 4
    43                                          
    44 0000002F 68[04000000]                    push dword b
    45 00000034 68[40000000]                    push dword format
    46 00000039 FF15[00000000]                  call [scanf]
    47 0000003F 83C408                          add esp, 2 * 4
    48                                          
    49 00000042 A1[00000000]                    mov eax, [a]
    50 00000047 0305[04000000]                  add eax, [b]
    51 0000004D A3[43000000]                    mov [sum], eax
    52                                  
    53                                          
    54 00000052 FF35[43000000]                  push dword [sum]  ; put sum on stack
    55 00000058 68[47000000]                    push dword mesaj_afisare  ;put on stack the message
    56 0000005D FF15[00000000]                  call [printf] ; print sum in base 16 and message
    57 00000063 83C408                          add esp, 2 * 4
    58                                          
    59                                          ; exit(0)
    60 00000066 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 00000068 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
