     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fprintf, fopen, fclose, scanf, gets               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import gets msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import fclose msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import fprintf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                  import fopen msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 54657874322E747874-         file db "Text2.txt", 0
    19 00000009 00                 
    20 0000000A 7700                        modacces db "w", 0
    21 0000000C 00000000                    descriptor dd 0
    22 00000010 257300                      format db "%s", 0
    23 00000013 00                          message db 0
    24 00000014 00                          cuv db 0
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29 00000000 68[0A000000]                    push dword modacces
    30 00000005 68[00000000]                    push dword file
    31 0000000A FF15[00000000]                  call [fopen]
    32 00000010 83C408                          add esp, 2*4
    33 00000013 A3[0C000000]                    mov [descriptor], eax
    34                                          citire_cuv:
    35                                              
    36                                              
    37 00000018 68[14000000]                        push dword cuv
    38 0000001D FF15[00000000]                      call [gets]
    39 00000023 83C404                              add esp, 4*1
    40                                              
    41 00000026 803D[14000000]30                    cmp [cuv], byte '0'
    42 0000002D 741B                                je final
    43 0000002F 68[14000000]                        push dword cuv
    44 00000034 68[10000000]                        push dword format
    45 00000039 FF35[0C000000]                      push dword [descriptor]
    46 0000003F FF15[00000000]                      call [fprintf]
    47 00000045 83C40C                              add esp, 3 * 4
    48                                              
    49                                              
    50 00000048 EBCE                                jmp citire_cuv
    51                                          final:   
    52                                          ; exit(0)
    53 0000004A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    54 0000004C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
