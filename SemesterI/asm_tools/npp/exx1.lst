     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit , printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  %include "string.asm"
     1                              <1> bits 32 ; assembling for the 32 bits architecture
     2                              <1> 
     3                              <1> ; our data is declared here (the variables needed by our program)
     4                              <1> segment data use32 class=data
     5                              <1>     ; ...
     6                              <1> 
     7                              <1> ; our code starts here
     8                              <1> segment code use32 class=code
     9                              <1>     string:
    10 00000000 B800000000          <1>         mov eax, 0x00 ;or 0
    11 00000005 BF01000000          <1>         mov edi, 1
    12 0000000A 8B4C2404            <1>         mov ecx, [esp + 4] ;clear 
    13                              <1>         loop_1:
    14 0000000E 41                  <1>             inc ecx
    15 0000000F 803931              <1>             cmp [ecx], byte '1'
    16 00000012 75FA                <1>             jne loop_1 ;if is not equal goes back to loop 1
    17 00000014 8B5C2404            <1>             mov ebx, [esp + 4]
    18                              <1>         loop_build_eax:
    19 00000018 49                  <1>             dec ecx 
    20 00000019 803931              <1>             cmp [ecx], byte '1'
    21 0000001C 7502                <1>             jne loop_build_eax_end_if
    22 0000001E 01D0                <1>             add eax, edx ;
    23                              <1>         loop_build_eax_end_if:
    24 00000020 D1E2                <1>             shl edx, 1
    25 00000022 39D9                <1>             cmp ecx, ebx
    26 00000024 75F2                <1>             jne loop_build_eax         
    27                              <1>         
    28                              <1>         ; exit(0)
    29 00000026 C3                  <1>         ret
    13                                                            
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 313031303031313162-         a db '10100111b', '01100011b', '110b', '101011b'
    17 00000009 303131303030313162-
    17 00000012 313130623130313031-
    17 0000001B 3162               
    18 0000001D 256400                      format db "%d", 0
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000027 68[00000000]                    push a 
    24 0000002C E8CFFFFFFF                      call string
    25 00000031 83C404                          add esp, 4*1
    26                                          
    27 00000034 50                              push eax
    28 00000035 68[1D000000]                    push format
    29 0000003A FF15[00000000]                  call [printf]
    30 00000040 83C408                          add esp, 4 * 2
    31                                          
    32                                          ; exit(0)
    33 00000043 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    34 00000045 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
