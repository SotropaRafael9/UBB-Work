     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01                          a db 1
    15 00000001 01                          b db 1
    16 00000002 01                          c db 1
    17 00000003 00000000                    e dd 0
    18 00000007 0E00000000000000            x dq 14
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          ;x-(a*b*25+c*3)/(a+b)+e; 29-(1*2*25+3*1)/(4)+4=29-(+3)/3+4=  33-32+4 = 5
    24 00000000 A0[00000000]                    mov al, [a]
    25 00000005 8A1D[01000000]                  mov bl, [b]
    26 0000000B F6E3                            mul bl
    27                                          
    28 0000000D B119                            mov cl, 25
    29 0000000F F6E1                            mul cl ;ax = a*b*25
    30                                          
    31 00000011 6650                            push ax
    32                                          
    33 00000013 8A1D[02000000]                  mov bl, [c]
    34 00000019 B103                            mov cl, 3
    35 0000001B F6E1                            mul cl
    36                                          
    37 0000001D 6689C2                          mov dx, ax
    38                                          
    39 00000020 6658                            pop ax
    40                                          
    41 00000022 6601D0                          add ax, dx ;(a*b*25+c*3)
    42                                          
    43 00000025 8A1D[00000000]                  mov bl, [a]
    44 0000002B 8A0D[01000000]                  mov cl, [b]
    45 00000031 00CB                            add bl, cl
    46                                          
    47 00000033 F6F3                            div bl ;ax=(a*b*25+c*3)/(a+b)
    48                                          
    49 00000035 6689C3                          mov bx, ax
    50                                          
    51 00000038 B800000000                      mov eax, 0
    52 0000003D BA00000000                      mov edx, 0
    53 00000042 6689D8                          mov ax, bx
    54                                          
    55 00000045 8B1D[07000000]                  mov ebx, [x]
    56 0000004B 8B0D[0B000000]                  mov ecx, [x+4]
    57                                          
    58 00000051 29C3                            sub ebx, eax
    59 00000053 19D1                            sbb ecx, edx
    60                                          
    61 00000055 A1[03000000]                    mov eax, [e]
    62                                          
    63 0000005A 01C3                            add ebx, eax
    64                                          
    65                                          
    66                                          
    67                                          
    68                                          
    69                                          
    70                                          
    71                                          
    72                                          
    73                                          
    74                                          ; exit(0)
    75 0000005C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    76 0000005E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
