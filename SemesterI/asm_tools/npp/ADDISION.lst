     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 01                          a db 1 
    15 00000001 0300                        b dw 3  
    16 00000003 0A000000                    c dd 10
    17 00000007 0F00000000000000            d dq 15
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22                                          ; a - byte, b - word, c - double word, d - quad word
    23                                          
    24                                          ; a + b + c + (d - a)
    25                                          
    26 00000000 B800000000                      mov EAX, 0
    27 00000005 A0[00000000]                    mov AL, [a]
    28 0000000A 660305[01000000]                ADD AX, [b] ;  AX = a + b
    29 00000011 0305[03000000]                  ADD EAX, [c] ; EAX = AX + c
    30                                          
    31 00000017 89C3                            mov EBX, EAX  ; EBX <= EAX
    32 00000019 A1[07000000]                    mov EAX ,[d]  ; EAX <= primi 4 bytes a lui d
    33 0000001E 8B15[0B000000]                  mov EDX ,[d+4] ; EDX <= ultimi 4 bytes a lui d
    34 00000024 2A05[00000000]                  SUB AL, [a]    ; EDX:EAX - a 
    35 0000002A 01D8                            ADD EAX, EBX ; EDX:EAX + EBX
    36 0000002C 83D200                          ADC EDX, 0
    37                                              
    38                                          
    39                                          
    40                                          ; exit(0)
    41 0000002F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    42 00000031 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
