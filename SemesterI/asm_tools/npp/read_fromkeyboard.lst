     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf
     8                                                 ; tell nasm that exit exists even if we won't be defining it
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 00000000                    a dd 0
    18 00000004 00000000                    b dd 0
    19                                  
    20 00000008 496E74726F64756365-         message1 db "Introduce the first number : ",13,10,0
    20 00000011 207468652066697273-
    20 0000001A 74206E756D62657220-
    20 00000023 3A200D0A00         
    21 00000028 496E74726F64756365-         message2 db "Introduce the second number : ", 13, 10, 0
    21 00000031 20746865207365636F-
    21 0000003A 6E64206E756D626572-
    21 00000043 203A200D0A00       
    22 00000049 256400                      format db "%d", 0
    23 0000004C 00000000                    ma dd 0
    24 00000050 72657A756C74617475-         mesaj_afisare db 'rezultatul este: %x',13,10, 0
    24 00000059 6C20657374653A2025-
    24 00000062 780D0A00           
    25                                      
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30 00000000 68[08000000]                    push dword message1
    31 00000005 FF15[00000000]                  call [printf]
    32 0000000B 83C404                          add esp, 4 * 1
    33                                          
    34 0000000E 68[00000000]                    push dword a
    35 00000013 68[49000000]                    push dword format
    36 00000018 FF15[00000000]                  call [scanf]
    37 0000001E 83C408                          add esp, 4 * 2
    38                                          
    39 00000021 68[28000000]                    push dword message2
    40 00000026 FF15[00000000]                  call [printf]
    41 0000002C 83C404                          add esp, 4 * 1
    42                                          
    43 0000002F 68[04000000]                    push dword b
    44 00000034 68[49000000]                    push dword format
    45 00000039 FF15[00000000]                  call [scanf]
    46 0000003F 83C408                          add esp, 4 * 2
    47                                          
    48 00000042 66B90200                        mov cx, 2
    49 00000046 A1[04000000]                    mov eax, dword[b]
    50 0000004B 0105[00000000]                  add [a], eax
    51 00000051 66A1[00000000]                  mov ax, word[a]
    52 00000057 668B15[02000000]                mov dx, word[a+2]
    53 0000005E 66F7F1                          div cx        
    54 00000061 66A3[4C000000]                  mov word[ma], ax
    55                                  
    56                                          
    57 00000067 FF35[4C000000]                  push dword[ma]
    58 0000006D 68[50000000]                    push dword mesaj_afisare
    59 00000072 FF15[00000000]                  call [scanf]
    60 00000078 83C408                          add esp, 2*4
    61                                          
    62                                          ; exit(0)
    63 0000007B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    64 0000007D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
