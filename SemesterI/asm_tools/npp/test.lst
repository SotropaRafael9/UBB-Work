     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf,fopen, fclose, fread, fscanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import fscanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import fopen msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                  import fclose msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                  import fread msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    15                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    16                                  
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19                                      ; ...
    20 00000000 257300                      format_s db "%s", 0
    21 00000003 25730A00                    format_s2 db "%s",10, 0
    22 00000007 256400                      format_d db "%d", 0
    23 0000000A 25640A00                    format_d2 db "%d",10, 0
    24 0000000E 00                          descriptor db 0
    25 0000000F 7200                        mod_acces db "r",0
    26 00000011 746573742E74787400          file db "test.txt",0
    27 0000001A 6473616B646A617775-         text db "dsakdjawuhdwajdpa dwadka idawkmdaw"
    27 00000023 686477616A64706120-
    27 0000002C 647761646B61206964-
    27 00000035 61776B6D646177     
    28 0000003C <res 00000064>              text2 resb 100
    29 000000A0 00000000                    L dd 0
    30 000000A4 4C203D2000                  message_L db "L = ",0
    31 000000A9 66696C65206E616D65-         message_file db "file name  = ",0
    31 000000B2 20203D2000         
    32 000000B7 577269746520746578-         message_text db "Write text", 0
    32 000000C0 7400               
    33 000000C2 <res 00000004>              number resd 1
    34 000000C6 00000000                    fl dd 0
    35                                      
    36                                      
    37                                  ; our code starts here
    38                                  segment code use32 class=code
    39                                      start:
    40                                          ; ...
    41                                  
    42                                          
    43 00000000 68[A4000000]                    push dword message_L
    44 00000005 FF15[00000000]                  call [printf]
    45 0000000B 83C404                          add esp, 1*4
    46                                          
    47                                          
    48 0000000E 68[A0000000]                    push dword L
    49 00000013 68[07000000]                    push dword format_d
    50 00000018 FF15[00000000]                  call [scanf]
    51 0000001E 83C408                          add esp, 2*4
    52                                  
    53                                          
    54 00000021 FF35[A0000000]                  push dword [L]
    55 00000027 68[0A000000]                    push dword format_d2
    56                                          
    57 0000002C FF15[00000000]                  call [printf]
    58 00000032 83C408                          add esp, 2*4
    59                                          
    60 00000035 68[A9000000]                    push dword message_file
    61 0000003A FF15[00000000]                  call [printf]
    62 00000040 83C404                          add esp, 1*4
    63                                          
    64 00000043 68[11000000]                    push dword file
    65 00000048 68[00000000]                    push dword format_s
    66 0000004D FF15[00000000]                  call [scanf]
    67 00000053 83C408                          add esp, 2*4
    68                                          
    69 00000056 68[11000000]                    push dword file
    70 0000005B 68[03000000]                    push dword format_s2
    71 00000060 FF15[00000000]                  call [printf]
    72 00000066 83C408                          add esp, 2*4
    73                                          
    74 00000069 68[0F000000]                    push dword mod_acces
    75 0000006E 68[11000000]                    push dword file
    76 00000073 FF15[00000000]                  call [fopen]
    77 00000079 83C408                          add esp, 2*4
    78                                          
    79 0000007C A3[C6000000]                    mov [fl], eax
    80                                          loop_L:
    81 00000081 68[3C000000]                        push dword text2
    82 00000086 68[00000000]                        push dword format_s
    83 0000008B FF35[C6000000]                      push dword [fl]
    84 00000091 FF15[00000000]                      call [fscanf]
    85 00000097 83C40C                              add esp, 4*3
    86                                              
    87 0000009A 83F800                              cmp eax, 0
    88 0000009D 7E24                                jle skip
    89                                              
    90 0000009F 68[3C000000]                        push dword text2
    91 000000A4 68[00000000]                        push dword format_s
    92 000000A9 FF15[00000000]                      call [printf]
    93 000000AF 83C408                              add esp, 8 
    94 000000B2 EBCD                    jmp loop_L            
    95                                          ;    jl final_L
    96                                          ;    cmp [L], byte 10
    97                                          ;    ja final_L
    98                                          ;read_text:
    99                                          ;    push dword text
   100                                          ;    push dword format_s
   101                                          ;    push dword [descriptor]
   102                                          ;    call [scanf]  
   103                                          ;    add esp, 3*4
   104                                          ;    
   105 000000B4 FF35[A0000000]                  push dword [L]
   106 000000BA FF15[00000000]                  call [printf]
   107 000000C0 83C404                          add esp, 1*4
   108                                          
   109                                    
   110                                          
   111                                          skip:
   112                                         
   113 000000C3 FF35[0E000000]                  push dword [descriptor]
   114 000000C9 FF15[00000000]                  call [fclose]
   115 000000CF 83C404                          add esp, 1*4
   116                                          final_L:
   117                                          final:
   118                                          
   119                                          
   120                                          ; exit(0)
   121 000000D2 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   122 000000D4 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
