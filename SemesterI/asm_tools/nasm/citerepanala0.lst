     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fprintf, fopen, fclose, gets               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                  import fclose msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import fprintf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                  import gets msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 25730A0D00                  format db "%s",10,13,0
    19 00000005 00000000                    descriptor dd 0
    20 00000009 7700                        modacces db "w",0
    21 0000000B 54657874322E747874          file db "Text2.txt"
    22 00000014 00                          cuv db 0
    23                                      
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28 00000000 68[09000000]                    push dword modacces
    29 00000005 68[0B000000]                    push dword file
    30 0000000A FF15[00000000]                  call [fopen]
    31 00000010 BC08000000                      mov esp, 2*4
    32                                          
    33 00000015 A3[05000000]                    mov [descriptor], eax
    34                                          loop_cuv:
    35 0000001A 68[14000000]                        push dword cuv
    36 0000001F FF15[00000000]                      call [gets]
    37 00000025 BC04000000                          mov esp, 1*4
    38                                              
    39 0000002A 803D[14000000]30                    cmp [cuv], byte '0'
    40 00000031 742F                                je final
    41                                              
    42 00000033 68[14000000]                        push dword cuv
    43 00000038 68[00000000]                        push dword format
    44 0000003D FF35[05000000]                      push dword [descriptor]
    45 00000043 FF15[00000000]                      call[fprintf]
    46 00000049 BC0C000000                          mov esp, 3*4
    47                                          
    48 0000004E BC08000000                      mov esp, 2*4
    49                                          
    50 00000053 FF35[05000000]                  push dword [descriptor]
    51 00000059 FF15[00000000]                  call [fclose]
    52 0000005F 83C404                          add esp, 1*4
    53                                          final:
    54                                          ; exit(0)
    55 00000062 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 00000064 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
